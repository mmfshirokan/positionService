// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mmfshirokan/positionService/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Reciver is an autogenerated mock type for the Reciver type
type Reciver struct {
	mock.Mock
}

type Reciver_Expecter struct {
	mock *mock.Mock
}

func (_m *Reciver) EXPECT() *Reciver_Expecter {
	return &Reciver_Expecter{mock: &_m.Mock}
}

// ReciveLast provides a mock function with given fields: ctx, symb
func (_m *Reciver) ReciveLast(ctx context.Context, symb string) (model.Price, error) {
	ret := _m.Called(ctx, symb)

	if len(ret) == 0 {
		panic("no return value specified for ReciveLast")
	}

	var r0 model.Price
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Price, error)); ok {
		return rf(ctx, symb)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Price); ok {
		r0 = rf(ctx, symb)
	} else {
		r0 = ret.Get(0).(model.Price)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reciver_ReciveLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReciveLast'
type Reciver_ReciveLast_Call struct {
	*mock.Call
}

// ReciveLast is a helper method to define mock.On call
//   - ctx context.Context
//   - symb string
func (_e *Reciver_Expecter) ReciveLast(ctx interface{}, symb interface{}) *Reciver_ReciveLast_Call {
	return &Reciver_ReciveLast_Call{Call: _e.mock.On("ReciveLast", ctx, symb)}
}

func (_c *Reciver_ReciveLast_Call) Run(run func(ctx context.Context, symb string)) *Reciver_ReciveLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Reciver_ReciveLast_Call) Return(_a0 model.Price, _a1 error) *Reciver_ReciveLast_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Reciver_ReciveLast_Call) RunAndReturn(run func(context.Context, string) (model.Price, error)) *Reciver_ReciveLast_Call {
	_c.Call.Return(run)
	return _c
}

// ReciveStream provides a mock function with given fields: ctx
func (_m *Reciver) ReciveStream(ctx context.Context) {
	_m.Called(ctx)
}

// Reciver_ReciveStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReciveStream'
type Reciver_ReciveStream_Call struct {
	*mock.Call
}

// ReciveStream is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Reciver_Expecter) ReciveStream(ctx interface{}) *Reciver_ReciveStream_Call {
	return &Reciver_ReciveStream_Call{Call: _e.mock.On("ReciveStream", ctx)}
}

func (_c *Reciver_ReciveStream_Call) Run(run func(ctx context.Context)) *Reciver_ReciveStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Reciver_ReciveStream_Call) Return() *Reciver_ReciveStream_Call {
	_c.Call.Return()
	return _c
}

func (_c *Reciver_ReciveStream_Call) RunAndReturn(run func(context.Context)) *Reciver_ReciveStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewReciver creates a new instance of Reciver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReciver(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reciver {
	mock := &Reciver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
