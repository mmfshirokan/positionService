// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	model "github.com/mmfshirokan/positionService/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MapInterface is an autogenerated mock type for the MapInterface type
type MapInterface struct {
	mock.Mock
}

type MapInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MapInterface) EXPECT() *MapInterface_Expecter {
	return &MapInterface_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: key, val
func (_m *MapInterface) Add(key model.SymbOperDTO, val chan model.Price) error {
	ret := _m.Called(key, val)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.SymbOperDTO, chan model.Price) error); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MapInterface_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MapInterface_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - key model.SymbOperDTO
//   - val chan model.Price
func (_e *MapInterface_Expecter) Add(key interface{}, val interface{}) *MapInterface_Add_Call {
	return &MapInterface_Add_Call{Call: _e.mock.On("Add", key, val)}
}

func (_c *MapInterface_Add_Call) Run(run func(key model.SymbOperDTO, val chan model.Price)) *MapInterface_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.SymbOperDTO), args[1].(chan model.Price))
	})
	return _c
}

func (_c *MapInterface_Add_Call) Return(_a0 error) *MapInterface_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MapInterface_Add_Call) RunAndReturn(run func(model.SymbOperDTO, chan model.Price) error) *MapInterface_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllChanForSymb provides a mock function with given fields: symb
func (_m *MapInterface) GetAllChanForSymb(symb string) ([]chan model.Price, error) {
	ret := _m.Called(symb)

	if len(ret) == 0 {
		panic("no return value specified for GetAllChanForSymb")
	}

	var r0 []chan model.Price
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]chan model.Price, error)); ok {
		return rf(symb)
	}
	if rf, ok := ret.Get(0).(func(string) []chan model.Price); ok {
		r0 = rf(symb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chan model.Price)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MapInterface_GetAllChanForSymb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllChanForSymb'
type MapInterface_GetAllChanForSymb_Call struct {
	*mock.Call
}

// GetAllChanForSymb is a helper method to define mock.On call
//   - symb string
func (_e *MapInterface_Expecter) GetAllChanForSymb(symb interface{}) *MapInterface_GetAllChanForSymb_Call {
	return &MapInterface_GetAllChanForSymb_Call{Call: _e.mock.On("GetAllChanForSymb", symb)}
}

func (_c *MapInterface_GetAllChanForSymb_Call) Run(run func(symb string)) *MapInterface_GetAllChanForSymb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MapInterface_GetAllChanForSymb_Call) Return(res []chan model.Price, _a1 error) *MapInterface_GetAllChanForSymb_Call {
	_c.Call.Return(res, _a1)
	return _c
}

func (_c *MapInterface_GetAllChanForSymb_Call) RunAndReturn(run func(string) ([]chan model.Price, error)) *MapInterface_GetAllChanForSymb_Call {
	_c.Call.Return(run)
	return _c
}

// NewMapInterface creates a new instance of MapInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMapInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MapInterface {
	mock := &MapInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
