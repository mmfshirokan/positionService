// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mmfshirokan/positionService/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// PositionManipulator is an autogenerated mock type for the PositionManipulator type
type PositionManipulator struct {
	mock.Mock
}

type PositionManipulator_Expecter struct {
	mock *mock.Mock
}

func (_m *PositionManipulator) EXPECT() *PositionManipulator_Expecter {
	return &PositionManipulator_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, position
func (_m *PositionManipulator) Add(ctx context.Context, position model.Position) error {
	ret := _m.Called(ctx, position)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Position) error); ok {
		r0 = rf(ctx, position)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PositionManipulator_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type PositionManipulator_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - position model.Position
func (_e *PositionManipulator_Expecter) Add(ctx interface{}, position interface{}) *PositionManipulator_Add_Call {
	return &PositionManipulator_Add_Call{Call: _e.mock.On("Add", ctx, position)}
}

func (_c *PositionManipulator_Add_Call) Run(run func(ctx context.Context, position model.Position)) *PositionManipulator_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Position))
	})
	return _c
}

func (_c *PositionManipulator_Add_Call) Return(_a0 error) *PositionManipulator_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PositionManipulator_Add_Call) RunAndReturn(run func(context.Context, model.Position) error) *PositionManipulator_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, position
func (_m *PositionManipulator) Update(ctx context.Context, position model.Position) error {
	ret := _m.Called(ctx, position)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Position) error); ok {
		r0 = rf(ctx, position)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PositionManipulator_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type PositionManipulator_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - position model.Position
func (_e *PositionManipulator_Expecter) Update(ctx interface{}, position interface{}) *PositionManipulator_Update_Call {
	return &PositionManipulator_Update_Call{Call: _e.mock.On("Update", ctx, position)}
}

func (_c *PositionManipulator_Update_Call) Run(run func(ctx context.Context, position model.Position)) *PositionManipulator_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Position))
	})
	return _c
}

func (_c *PositionManipulator_Update_Call) Return(_a0 error) *PositionManipulator_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PositionManipulator_Update_Call) RunAndReturn(run func(context.Context, model.Position) error) *PositionManipulator_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewPositionManipulator creates a new instance of PositionManipulator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPositionManipulator(t interface {
	mock.TestingT
	Cleanup(func())
}) *PositionManipulator {
	mock := &PositionManipulator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
