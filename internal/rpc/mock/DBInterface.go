// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mmfshirokan/positionService/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// DBInterface is an autogenerated mock type for the DBInterface type
type DBInterface struct {
	mock.Mock
}

type DBInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *DBInterface) EXPECT() *DBInterface_Expecter {
	return &DBInterface_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, position
func (_m *DBInterface) Add(ctx context.Context, position model.Position) error {
	ret := _m.Called(ctx, position)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Position) error); ok {
		r0 = rf(ctx, position)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBInterface_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type DBInterface_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - position model.Position
func (_e *DBInterface_Expecter) Add(ctx interface{}, position interface{}) *DBInterface_Add_Call {
	return &DBInterface_Add_Call{Call: _e.mock.On("Add", ctx, position)}
}

func (_c *DBInterface_Add_Call) Run(run func(ctx context.Context, position model.Position)) *DBInterface_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Position))
	})
	return _c
}

func (_c *DBInterface_Add_Call) Return(_a0 error) *DBInterface_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBInterface_Add_Call) RunAndReturn(run func(context.Context, model.Position) error) *DBInterface_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Deleete provides a mock function with given fields: ctx, id
func (_m *DBInterface) Deleete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Deleete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBInterface_Deleete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deleete'
type DBInterface_Deleete_Call struct {
	*mock.Call
}

// Deleete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *DBInterface_Expecter) Deleete(ctx interface{}, id interface{}) *DBInterface_Deleete_Call {
	return &DBInterface_Deleete_Call{Call: _e.mock.On("Deleete", ctx, id)}
}

func (_c *DBInterface_Deleete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *DBInterface_Deleete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *DBInterface_Deleete_Call) Return(_a0 error) *DBInterface_Deleete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBInterface_Deleete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *DBInterface_Deleete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *DBInterface) Get(ctx context.Context, id uuid.UUID) ([]model.Position, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Position, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Position); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type DBInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *DBInterface_Expecter) Get(ctx interface{}, id interface{}) *DBInterface_Get_Call {
	return &DBInterface_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *DBInterface_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *DBInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *DBInterface_Get_Call) Return(_a0 []model.Position, _a1 error) *DBInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]model.Position, error)) *DBInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOpend provides a mock function with given fields: ctx
func (_m *DBInterface) GetAllOpend(ctx context.Context) ([]model.Position, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOpend")
	}

	var r0 []model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Position, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Position); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_GetAllOpend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOpend'
type DBInterface_GetAllOpend_Call struct {
	*mock.Call
}

// GetAllOpend is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DBInterface_Expecter) GetAllOpend(ctx interface{}) *DBInterface_GetAllOpend_Call {
	return &DBInterface_GetAllOpend_Call{Call: _e.mock.On("GetAllOpend", ctx)}
}

func (_c *DBInterface_GetAllOpend_Call) Run(run func(ctx context.Context)) *DBInterface_GetAllOpend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DBInterface_GetAllOpend_Call) Return(_a0 []model.Position, _a1 error) *DBInterface_GetAllOpend_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_GetAllOpend_Call) RunAndReturn(run func(context.Context) ([]model.Position, error)) *DBInterface_GetAllOpend_Call {
	_c.Call.Return(run)
	return _c
}

// GetLaterThen provides a mock function with given fields: ctx, t
func (_m *DBInterface) GetLaterThen(ctx context.Context, t time.Time) ([]model.Position, error) {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for GetLaterThen")
	}

	var r0 []model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]model.Position, error)); ok {
		return rf(ctx, t)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []model.Position); ok {
		r0 = rf(ctx, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_GetLaterThen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLaterThen'
type DBInterface_GetLaterThen_Call struct {
	*mock.Call
}

// GetLaterThen is a helper method to define mock.On call
//   - ctx context.Context
//   - t time.Time
func (_e *DBInterface_Expecter) GetLaterThen(ctx interface{}, t interface{}) *DBInterface_GetLaterThen_Call {
	return &DBInterface_GetLaterThen_Call{Call: _e.mock.On("GetLaterThen", ctx, t)}
}

func (_c *DBInterface_GetLaterThen_Call) Run(run func(ctx context.Context, t time.Time)) *DBInterface_GetLaterThen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *DBInterface_GetLaterThen_Call) Return(_a0 []model.Position, _a1 error) *DBInterface_GetLaterThen_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_GetLaterThen_Call) RunAndReturn(run func(context.Context, time.Time) ([]model.Position, error)) *DBInterface_GetLaterThen_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneState provides a mock function with given fields: ctx, operID
func (_m *DBInterface) GetOneState(ctx context.Context, operID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, operID)

	if len(ret) == 0 {
		panic("no return value specified for GetOneState")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, operID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, operID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, operID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_GetOneState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneState'
type DBInterface_GetOneState_Call struct {
	*mock.Call
}

// GetOneState is a helper method to define mock.On call
//   - ctx context.Context
//   - operID uuid.UUID
func (_e *DBInterface_Expecter) GetOneState(ctx interface{}, operID interface{}) *DBInterface_GetOneState_Call {
	return &DBInterface_GetOneState_Call{Call: _e.mock.On("GetOneState", ctx, operID)}
}

func (_c *DBInterface_GetOneState_Call) Run(run func(ctx context.Context, operID uuid.UUID)) *DBInterface_GetOneState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *DBInterface_GetOneState_Call) Return(_a0 bool, _a1 error) *DBInterface_GetOneState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_GetOneState_Call) RunAndReturn(run func(context.Context, uuid.UUID) (bool, error)) *DBInterface_GetOneState_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, position
func (_m *DBInterface) Update(ctx context.Context, position model.Position) error {
	ret := _m.Called(ctx, position)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Position) error); ok {
		r0 = rf(ctx, position)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type DBInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - position model.Position
func (_e *DBInterface_Expecter) Update(ctx interface{}, position interface{}) *DBInterface_Update_Call {
	return &DBInterface_Update_Call{Call: _e.mock.On("Update", ctx, position)}
}

func (_c *DBInterface_Update_Call) Run(run func(ctx context.Context, position model.Position)) *DBInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Position))
	})
	return _c
}

func (_c *DBInterface_Update_Call) Return(_a0 error) *DBInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBInterface_Update_Call) RunAndReturn(run func(context.Context, model.Position) error) *DBInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewDBInterface creates a new instance of DBInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBInterface {
	mock := &DBInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
