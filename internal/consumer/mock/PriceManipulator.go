// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	model "github.com/mmfshirokan/positionService/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// PriceManipulator is an autogenerated mock type for the PriceManipulator type
type PriceManipulator struct {
	mock.Mock
}

type PriceManipulator_Expecter struct {
	mock *mock.Mock
}

func (_m *PriceManipulator) EXPECT() *PriceManipulator_Expecter {
	return &PriceManipulator_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: key, ch
func (_m *PriceManipulator) Add(key model.SymbOperDTO, ch chan model.Price) {
	_m.Called(key, ch)
}

// PriceManipulator_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type PriceManipulator_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - key model.SymbOperDTO
//   - ch chan model.Price
func (_e *PriceManipulator_Expecter) Add(key interface{}, ch interface{}) *PriceManipulator_Add_Call {
	return &PriceManipulator_Add_Call{Call: _e.mock.On("Add", key, ch)}
}

func (_c *PriceManipulator_Add_Call) Run(run func(key model.SymbOperDTO, ch chan model.Price)) *PriceManipulator_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.SymbOperDTO), args[1].(chan model.Price))
	})
	return _c
}

func (_c *PriceManipulator_Add_Call) Return() *PriceManipulator_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *PriceManipulator_Add_Call) RunAndReturn(run func(model.SymbOperDTO, chan model.Price)) *PriceManipulator_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *PriceManipulator) Delete(key model.SymbOperDTO) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.SymbOperDTO) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PriceManipulator_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PriceManipulator_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key model.SymbOperDTO
func (_e *PriceManipulator_Expecter) Delete(key interface{}) *PriceManipulator_Delete_Call {
	return &PriceManipulator_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *PriceManipulator_Delete_Call) Run(run func(key model.SymbOperDTO)) *PriceManipulator_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.SymbOperDTO))
	})
	return _c
}

func (_c *PriceManipulator_Delete_Call) Return(wasDeleted bool) *PriceManipulator_Delete_Call {
	_c.Call.Return(wasDeleted)
	return _c
}

func (_c *PriceManipulator_Delete_Call) RunAndReturn(run func(model.SymbOperDTO) bool) *PriceManipulator_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// NewPriceManipulator creates a new instance of PriceManipulator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPriceManipulator(t interface {
	mock.TestingT
	Cleanup(func())
}) *PriceManipulator {
	mock := &PriceManipulator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
