// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	model "github.com/mmfshirokan/positionService/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// PositionGeter is an autogenerated mock type for the PositionGeter type
type PositionGeter struct {
	mock.Mock
}

type PositionGeter_Expecter struct {
	mock *mock.Mock
}

func (_m *PositionGeter) EXPECT() *PositionGeter_Expecter {
	return &PositionGeter_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: userID
func (_m *PositionGeter) Get(userID string) (chan model.Position, bool) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 chan model.Position
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (chan model.Position, bool)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) chan model.Position); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// PositionGeter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PositionGeter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - userID string
func (_e *PositionGeter_Expecter) Get(userID interface{}) *PositionGeter_Get_Call {
	return &PositionGeter_Get_Call{Call: _e.mock.On("Get", userID)}
}

func (_c *PositionGeter_Get_Call) Run(run func(userID string)) *PositionGeter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PositionGeter_Get_Call) Return(_a0 chan model.Position, _a1 bool) *PositionGeter_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PositionGeter_Get_Call) RunAndReturn(run func(string) (chan model.Position, bool)) *PositionGeter_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewPositionGeter creates a new instance of PositionGeter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPositionGeter(t interface {
	mock.TestingT
	Cleanup(func())
}) *PositionGeter {
	mock := &PositionGeter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
